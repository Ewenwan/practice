/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tests_H
#define tests_H

#include <thrift/TDispatchProcessor.h>
#include "tests_types.h"



class testsIf {
 public:
  virtual ~testsIf() {}
  virtual void test1(std::string& _return, const std::string& doc_id) = 0;
};

class testsIfFactory {
 public:
  typedef testsIf Handler;

  virtual ~testsIfFactory() {}

  virtual testsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(testsIf* /* handler */) = 0;
};

class testsIfSingletonFactory : virtual public testsIfFactory {
 public:
  testsIfSingletonFactory(const boost::shared_ptr<testsIf>& iface) : iface_(iface) {}
  virtual ~testsIfSingletonFactory() {}

  virtual testsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(testsIf* /* handler */) {}

 protected:
  boost::shared_ptr<testsIf> iface_;
};

class testsNull : virtual public testsIf {
 public:
  virtual ~testsNull() {}
  void test1(std::string& /* _return */, const std::string& /* doc_id */) {
    return;
  }
};

typedef struct _tests_test1_args__isset {
  _tests_test1_args__isset() : doc_id(false) {}
  bool doc_id;
} _tests_test1_args__isset;

class tests_test1_args {
 public:

  tests_test1_args() : doc_id() {
  }

  virtual ~tests_test1_args() throw() {}

  std::string doc_id;

  _tests_test1_args__isset __isset;

  void __set_doc_id(const std::string& val) {
    doc_id = val;
  }

  bool operator == (const tests_test1_args & rhs) const
  {
    if (!(doc_id == rhs.doc_id))
      return false;
    return true;
  }
  bool operator != (const tests_test1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tests_test1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tests_test1_pargs {
 public:


  virtual ~tests_test1_pargs() throw() {}

  const std::string* doc_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tests_test1_result__isset {
  _tests_test1_result__isset() : success(false) {}
  bool success;
} _tests_test1_result__isset;

class tests_test1_result {
 public:

  tests_test1_result() : success() {
  }

  virtual ~tests_test1_result() throw() {}

  std::string success;

  _tests_test1_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const tests_test1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const tests_test1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tests_test1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tests_test1_presult__isset {
  _tests_test1_presult__isset() : success(false) {}
  bool success;
} _tests_test1_presult__isset;

class tests_test1_presult {
 public:


  virtual ~tests_test1_presult() throw() {}

  std::string* success;

  _tests_test1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class testsClient : virtual public testsIf {
 public:
  testsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  testsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void test1(std::string& _return, const std::string& doc_id);
  void send_test1(const std::string& doc_id);
  void recv_test1(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class testsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<testsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (testsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  testsProcessor(boost::shared_ptr<testsIf> iface) :
    iface_(iface) {
    processMap_["test1"] = &testsProcessor::process_test1;
  }

  virtual ~testsProcessor() {}
};

class testsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  testsProcessorFactory(const ::boost::shared_ptr< testsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< testsIfFactory > handlerFactory_;
};

class testsMultiface : virtual public testsIf {
 public:
  testsMultiface(std::vector<boost::shared_ptr<testsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~testsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<testsIf> > ifaces_;
  testsMultiface() {}
  void add(boost::shared_ptr<testsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void test1(std::string& _return, const std::string& doc_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test1(_return, doc_id);
    }
    ifaces_[i]->test1(_return, doc_id);
    return;
  }

};



#endif
