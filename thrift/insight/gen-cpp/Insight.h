/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Insight_H
#define Insight_H

#include <thrift/TDispatchProcessor.h>
#include "insight_types.h"



class InsightIf {
 public:
  virtual ~InsightIf() {}
  virtual void Hello(Person& _return, const Person& person) = 0;
  virtual void Hi(Person& _return, const Person& p1, const Person& p2) = 0;
};

class InsightIfFactory {
 public:
  typedef InsightIf Handler;

  virtual ~InsightIfFactory() {}

  virtual InsightIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InsightIf* /* handler */) = 0;
};

class InsightIfSingletonFactory : virtual public InsightIfFactory {
 public:
  InsightIfSingletonFactory(const boost::shared_ptr<InsightIf>& iface) : iface_(iface) {}
  virtual ~InsightIfSingletonFactory() {}

  virtual InsightIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InsightIf* /* handler */) {}

 protected:
  boost::shared_ptr<InsightIf> iface_;
};

class InsightNull : virtual public InsightIf {
 public:
  virtual ~InsightNull() {}
  void Hello(Person& /* _return */, const Person& /* person */) {
    return;
  }
  void Hi(Person& /* _return */, const Person& /* p1 */, const Person& /* p2 */) {
    return;
  }
};

typedef struct _Insight_Hello_args__isset {
  _Insight_Hello_args__isset() : person(false) {}
  bool person;
} _Insight_Hello_args__isset;

class Insight_Hello_args {
 public:

  Insight_Hello_args() {
  }

  virtual ~Insight_Hello_args() throw() {}

  Person person;

  _Insight_Hello_args__isset __isset;

  void __set_person(const Person& val) {
    person = val;
  }

  bool operator == (const Insight_Hello_args & rhs) const
  {
    if (!(person == rhs.person))
      return false;
    return true;
  }
  bool operator != (const Insight_Hello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Insight_Hello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Insight_Hello_pargs {
 public:


  virtual ~Insight_Hello_pargs() throw() {}

  const Person* person;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Insight_Hello_result__isset {
  _Insight_Hello_result__isset() : success(false) {}
  bool success;
} _Insight_Hello_result__isset;

class Insight_Hello_result {
 public:

  Insight_Hello_result() {
  }

  virtual ~Insight_Hello_result() throw() {}

  Person success;

  _Insight_Hello_result__isset __isset;

  void __set_success(const Person& val) {
    success = val;
  }

  bool operator == (const Insight_Hello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Insight_Hello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Insight_Hello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Insight_Hello_presult__isset {
  _Insight_Hello_presult__isset() : success(false) {}
  bool success;
} _Insight_Hello_presult__isset;

class Insight_Hello_presult {
 public:


  virtual ~Insight_Hello_presult() throw() {}

  Person* success;

  _Insight_Hello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Insight_Hi_args__isset {
  _Insight_Hi_args__isset() : p1(false), p2(false) {}
  bool p1;
  bool p2;
} _Insight_Hi_args__isset;

class Insight_Hi_args {
 public:

  Insight_Hi_args() {
  }

  virtual ~Insight_Hi_args() throw() {}

  Person p1;
  Person p2;

  _Insight_Hi_args__isset __isset;

  void __set_p1(const Person& val) {
    p1 = val;
  }

  void __set_p2(const Person& val) {
    p2 = val;
  }

  bool operator == (const Insight_Hi_args & rhs) const
  {
    if (!(p1 == rhs.p1))
      return false;
    if (!(p2 == rhs.p2))
      return false;
    return true;
  }
  bool operator != (const Insight_Hi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Insight_Hi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Insight_Hi_pargs {
 public:


  virtual ~Insight_Hi_pargs() throw() {}

  const Person* p1;
  const Person* p2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Insight_Hi_result__isset {
  _Insight_Hi_result__isset() : success(false) {}
  bool success;
} _Insight_Hi_result__isset;

class Insight_Hi_result {
 public:

  Insight_Hi_result() {
  }

  virtual ~Insight_Hi_result() throw() {}

  Person success;

  _Insight_Hi_result__isset __isset;

  void __set_success(const Person& val) {
    success = val;
  }

  bool operator == (const Insight_Hi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Insight_Hi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Insight_Hi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Insight_Hi_presult__isset {
  _Insight_Hi_presult__isset() : success(false) {}
  bool success;
} _Insight_Hi_presult__isset;

class Insight_Hi_presult {
 public:


  virtual ~Insight_Hi_presult() throw() {}

  Person* success;

  _Insight_Hi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InsightClient : virtual public InsightIf {
 public:
  InsightClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  InsightClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Hello(Person& _return, const Person& person);
  void send_Hello(const Person& person);
  void recv_Hello(Person& _return);
  void Hi(Person& _return, const Person& p1, const Person& p2);
  void send_Hi(const Person& p1, const Person& p2);
  void recv_Hi(Person& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InsightProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<InsightIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InsightProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Hello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Hi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InsightProcessor(boost::shared_ptr<InsightIf> iface) :
    iface_(iface) {
    processMap_["Hello"] = &InsightProcessor::process_Hello;
    processMap_["Hi"] = &InsightProcessor::process_Hi;
  }

  virtual ~InsightProcessor() {}
};

class InsightProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InsightProcessorFactory(const ::boost::shared_ptr< InsightIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InsightIfFactory > handlerFactory_;
};

class InsightMultiface : virtual public InsightIf {
 public:
  InsightMultiface(std::vector<boost::shared_ptr<InsightIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InsightMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InsightIf> > ifaces_;
  InsightMultiface() {}
  void add(boost::shared_ptr<InsightIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Hello(Person& _return, const Person& person) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Hello(_return, person);
    }
    ifaces_[i]->Hello(_return, person);
    return;
  }

  void Hi(Person& _return, const Person& p1, const Person& p2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Hi(_return, p1, p2);
    }
    ifaces_[i]->Hi(_return, p1, p2);
    return;
  }

};



#endif
