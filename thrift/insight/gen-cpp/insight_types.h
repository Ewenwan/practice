/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef insight_TYPES_H
#define insight_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _Person__isset {
  _Person__isset() : name(false), age(false), address(false) {}
  bool name;
  bool age;
  bool address;
} _Person__isset;

class Person {
 public:

  static const char* ascii_fingerprint; // = "614DB859ACF17855F9BC7D08DDD7B32A";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x4D,0xB8,0x59,0xAC,0xF1,0x78,0x55,0xF9,0xBC,0x7D,0x08,0xDD,0xD7,0xB3,0x2A};

  Person() : name(), age(0), address() {
  }

  virtual ~Person() throw() {}

  std::string name;
  int32_t age;
  std::string address;

  _Person__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_age(const int32_t val) {
    age = val;
  }

  void __set_address(const std::string& val) {
    address = val;
    __isset.address = true;
  }

  bool operator == (const Person & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (__isset.address != rhs.__isset.address)
      return false;
    else if (__isset.address && !(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const Person &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Person & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Person &a, Person &b);



#endif
